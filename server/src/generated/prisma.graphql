# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Center implements Node {
  id: ID!
  name: String!
  location: String!
  capacity: Int!
  facilities: String!
  images: [String!]
  price: Int!
  user(where: UserWhereInput): User
}

type Event implements Node {
  id: ID!
  title: String!
  description: String!
  status: Status!
  date: DateTime!
  center(where: CenterWhereInput): Center
  user(where: UserWhereInput): User
}

type User implements Node {
  id: ID!
  fullname: String!
  email: String!
  password: String!
  role: Role!
  center(where: CenterWhereInput, orderBy: CenterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Center!]
  event(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
}


#
# Other Types
#

type AggregateCenter {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type CenterConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CenterEdge]!
  aggregate: AggregateCenter!
}

input CenterCreateimagesInput {
  set: [String!]
}

input CenterCreateInput {
  name: String!
  location: String!
  capacity: Int!
  facilities: String!
  price: Int!
  images: CenterCreateimagesInput
  user: UserCreateOneWithoutCenterInput
}

input CenterCreateManyWithoutUserInput {
  create: [CenterCreateWithoutUserInput!]
  connect: [CenterWhereUniqueInput!]
}

input CenterCreateOneInput {
  create: CenterCreateInput
  connect: CenterWhereUniqueInput
}

input CenterCreateWithoutUserInput {
  name: String!
  location: String!
  capacity: Int!
  facilities: String!
  price: Int!
  images: CenterCreateimagesInput
}

"""
An edge in a connection.
"""
type CenterEdge {
  """
  The item at the end of the edge.
  """
  node: Center!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CenterOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  location_ASC
  location_DESC
  capacity_ASC
  capacity_DESC
  facilities_ASC
  facilities_DESC
  price_ASC
  price_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CenterPreviousValues {
  id: ID!
  name: String!
  location: String!
  capacity: Int!
  facilities: String!
  images: [String!]
  price: Int!
}

type CenterSubscriptionPayload {
  mutation: MutationType!
  node: Center
  updatedFields: [String!]
  previousValues: CenterPreviousValues
}

input CenterSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CenterSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CenterSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CenterWhereInput
}

input CenterUpdateDataInput {
  name: String
  location: String
  capacity: Int
  facilities: String
  price: Int
  images: CenterUpdateimagesInput
  user: UserUpdateOneWithoutCenterInput
}

input CenterUpdateimagesInput {
  set: [String!]
}

input CenterUpdateInput {
  name: String
  location: String
  capacity: Int
  facilities: String
  price: Int
  images: CenterUpdateimagesInput
  user: UserUpdateOneWithoutCenterInput
}

input CenterUpdateManyWithoutUserInput {
  create: [CenterCreateWithoutUserInput!]
  connect: [CenterWhereUniqueInput!]
  disconnect: [CenterWhereUniqueInput!]
  delete: [CenterWhereUniqueInput!]
  update: [CenterUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CenterUpsertWithWhereUniqueWithoutUserInput!]
}

input CenterUpdateOneInput {
  create: CenterCreateInput
  connect: CenterWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CenterUpdateDataInput
  upsert: CenterUpsertNestedInput
}

input CenterUpdateWithoutUserDataInput {
  name: String
  location: String
  capacity: Int
  facilities: String
  price: Int
  images: CenterUpdateimagesInput
}

input CenterUpdateWithWhereUniqueWithoutUserInput {
  where: CenterWhereUniqueInput!
  data: CenterUpdateWithoutUserDataInput!
}

input CenterUpsertNestedInput {
  update: CenterUpdateDataInput!
  create: CenterCreateInput!
}

input CenterUpsertWithWhereUniqueWithoutUserInput {
  where: CenterWhereUniqueInput!
  update: CenterUpdateWithoutUserDataInput!
  create: CenterCreateWithoutUserInput!
}

input CenterWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CenterWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CenterWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  location: String
  """
  All values that are not equal to given value.
  """
  location_not: String
  """
  All values that are contained in given list.
  """
  location_in: [String!]
  """
  All values that are not contained in given list.
  """
  location_not_in: [String!]
  """
  All values less than the given value.
  """
  location_lt: String
  """
  All values less than or equal the given value.
  """
  location_lte: String
  """
  All values greater than the given value.
  """
  location_gt: String
  """
  All values greater than or equal the given value.
  """
  location_gte: String
  """
  All values containing the given string.
  """
  location_contains: String
  """
  All values not containing the given string.
  """
  location_not_contains: String
  """
  All values starting with the given string.
  """
  location_starts_with: String
  """
  All values not starting with the given string.
  """
  location_not_starts_with: String
  """
  All values ending with the given string.
  """
  location_ends_with: String
  """
  All values not ending with the given string.
  """
  location_not_ends_with: String
  capacity: Int
  """
  All values that are not equal to given value.
  """
  capacity_not: Int
  """
  All values that are contained in given list.
  """
  capacity_in: [Int!]
  """
  All values that are not contained in given list.
  """
  capacity_not_in: [Int!]
  """
  All values less than the given value.
  """
  capacity_lt: Int
  """
  All values less than or equal the given value.
  """
  capacity_lte: Int
  """
  All values greater than the given value.
  """
  capacity_gt: Int
  """
  All values greater than or equal the given value.
  """
  capacity_gte: Int
  facilities: String
  """
  All values that are not equal to given value.
  """
  facilities_not: String
  """
  All values that are contained in given list.
  """
  facilities_in: [String!]
  """
  All values that are not contained in given list.
  """
  facilities_not_in: [String!]
  """
  All values less than the given value.
  """
  facilities_lt: String
  """
  All values less than or equal the given value.
  """
  facilities_lte: String
  """
  All values greater than the given value.
  """
  facilities_gt: String
  """
  All values greater than or equal the given value.
  """
  facilities_gte: String
  """
  All values containing the given string.
  """
  facilities_contains: String
  """
  All values not containing the given string.
  """
  facilities_not_contains: String
  """
  All values starting with the given string.
  """
  facilities_starts_with: String
  """
  All values not starting with the given string.
  """
  facilities_not_starts_with: String
  """
  All values ending with the given string.
  """
  facilities_ends_with: String
  """
  All values not ending with the given string.
  """
  facilities_not_ends_with: String
  price: Int
  """
  All values that are not equal to given value.
  """
  price_not: Int
  """
  All values that are contained in given list.
  """
  price_in: [Int!]
  """
  All values that are not contained in given list.
  """
  price_not_in: [Int!]
  """
  All values less than the given value.
  """
  price_lt: Int
  """
  All values less than or equal the given value.
  """
  price_lte: Int
  """
  All values greater than the given value.
  """
  price_gt: Int
  """
  All values greater than or equal the given value.
  """
  price_gte: Int
  user: UserWhereInput
}

input CenterWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
A connection to a list of items.
"""
type EventConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  title: String!
  description: String!
  status: Status
  date: DateTime!
  center: CenterCreateOneInput
  user: UserCreateOneWithoutEventInput
}

input EventCreateManyWithoutUserInput {
  create: [EventCreateWithoutUserInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutUserInput {
  title: String!
  description: String!
  status: Status
  date: DateTime!
  center: CenterCreateOneInput
}

"""
An edge in a connection.
"""
type EventEdge {
  """
  The item at the end of the edge.
  """
  node: Event!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
  date_ASC
  date_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  description: String!
  status: Status!
  date: DateTime!
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [EventSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [EventSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  title: String
  description: String
  status: Status
  date: DateTime
  center: CenterUpdateOneInput
  user: UserUpdateOneWithoutEventInput
}

input EventUpdateManyWithoutUserInput {
  create: [EventCreateWithoutUserInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutUserInput!]
}

input EventUpdateWithoutUserDataInput {
  title: String
  description: String
  status: Status
  date: DateTime
  center: CenterUpdateOneInput
}

input EventUpdateWithWhereUniqueWithoutUserInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutUserDataInput!
}

input EventUpsertWithWhereUniqueWithoutUserInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutUserDataInput!
  create: EventCreateWithoutUserInput!
}

input EventWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [EventWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [EventWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  status: Status
  """
  All values that are not equal to given value.
  """
  status_not: Status
  """
  All values that are contained in given list.
  """
  status_in: [Status!]
  """
  All values that are not contained in given list.
  """
  status_not_in: [Status!]
  date: DateTime
  """
  All values that are not equal to given value.
  """
  date_not: DateTime
  """
  All values that are contained in given list.
  """
  date_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  date_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  date_lt: DateTime
  """
  All values less than or equal the given value.
  """
  date_lte: DateTime
  """
  All values greater than the given value.
  """
  date_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  date_gte: DateTime
  center: CenterWhereInput
  user: UserWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createCenter(data: CenterCreateInput!): Center!
  createEvent(data: EventCreateInput!): Event!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateCenter(data: CenterUpdateInput!, where: CenterWhereUniqueInput!): Center
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  deleteUser(where: UserWhereUniqueInput!): User
  deleteCenter(where: CenterWhereUniqueInput!): Center
  deleteEvent(where: EventWhereUniqueInput!): Event
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertCenter(where: CenterWhereUniqueInput!, create: CenterCreateInput!, update: CenterUpdateInput!): Center!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyCenters(data: CenterUpdateInput!, where: CenterWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateInput!, where: EventWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyCenters(where: CenterWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  centers(where: CenterWhereInput, orderBy: CenterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Center]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  user(where: UserWhereUniqueInput!): User
  center(where: CenterWhereUniqueInput!): Center
  event(where: EventWhereUniqueInput!): Event
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  centersConnection(where: CenterWhereInput, orderBy: CenterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CenterConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

enum Role {
  Superadmin
  Admin
  User
}

enum Status {
  Open
  Closed
  Cancelled
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  center(where: CenterSubscriptionWhereInput): CenterSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  fullname: String!
  email: String!
  password: String!
  role: Role
  center: CenterCreateManyWithoutUserInput
  event: EventCreateManyWithoutUserInput
}

input UserCreateOneWithoutCenterInput {
  create: UserCreateWithoutCenterInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEventInput {
  create: UserCreateWithoutEventInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCenterInput {
  fullname: String!
  email: String!
  password: String!
  role: Role
  event: EventCreateManyWithoutUserInput
}

input UserCreateWithoutEventInput {
  fullname: String!
  email: String!
  password: String!
  role: Role
  center: CenterCreateManyWithoutUserInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  fullname_ASC
  fullname_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  fullname: String!
  email: String!
  password: String!
  role: Role!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  fullname: String
  email: String
  password: String
  role: Role
  center: CenterUpdateManyWithoutUserInput
  event: EventUpdateManyWithoutUserInput
}

input UserUpdateOneWithoutCenterInput {
  create: UserCreateWithoutCenterInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCenterDataInput
  upsert: UserUpsertWithoutCenterInput
}

input UserUpdateOneWithoutEventInput {
  create: UserCreateWithoutEventInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutEventDataInput
  upsert: UserUpsertWithoutEventInput
}

input UserUpdateWithoutCenterDataInput {
  fullname: String
  email: String
  password: String
  role: Role
  event: EventUpdateManyWithoutUserInput
}

input UserUpdateWithoutEventDataInput {
  fullname: String
  email: String
  password: String
  role: Role
  center: CenterUpdateManyWithoutUserInput
}

input UserUpsertWithoutCenterInput {
  update: UserUpdateWithoutCenterDataInput!
  create: UserCreateWithoutCenterInput!
}

input UserUpsertWithoutEventInput {
  update: UserUpdateWithoutEventDataInput!
  create: UserCreateWithoutEventInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  fullname: String
  """
  All values that are not equal to given value.
  """
  fullname_not: String
  """
  All values that are contained in given list.
  """
  fullname_in: [String!]
  """
  All values that are not contained in given list.
  """
  fullname_not_in: [String!]
  """
  All values less than the given value.
  """
  fullname_lt: String
  """
  All values less than or equal the given value.
  """
  fullname_lte: String
  """
  All values greater than the given value.
  """
  fullname_gt: String
  """
  All values greater than or equal the given value.
  """
  fullname_gte: String
  """
  All values containing the given string.
  """
  fullname_contains: String
  """
  All values not containing the given string.
  """
  fullname_not_contains: String
  """
  All values starting with the given string.
  """
  fullname_starts_with: String
  """
  All values not starting with the given string.
  """
  fullname_not_starts_with: String
  """
  All values ending with the given string.
  """
  fullname_ends_with: String
  """
  All values not ending with the given string.
  """
  fullname_not_ends_with: String
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  role: Role
  """
  All values that are not equal to given value.
  """
  role_not: Role
  """
  All values that are contained in given list.
  """
  role_in: [Role!]
  """
  All values that are not contained in given list.
  """
  role_not_in: [Role!]
  center_every: CenterWhereInput
  center_some: CenterWhereInput
  center_none: CenterWhereInput
  event_every: EventWhereInput
  event_some: EventWhereInput
  event_none: EventWhereInput
}

input UserWhereUniqueInput {
  id: ID
}
